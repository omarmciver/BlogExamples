// This is an auto-generated file.
<#@ template language="C#" hostSpecific="true" debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDte" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System" #>
<#
  var visualStudio = (this.Host as IServiceProvider).GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
  var project = visualStudio.Solution.FindProjectItem(this.Host.TemplateFile).ContainingProject as EnvDTE.Project;
  var projectItems = GetProjectItemsRecursively(project.ProjectItems);
#>
using System.IO;
using System.Reflection;

public static class EmbeddedResourceStream
{
<# 
foreach(var embededResource in projectItems.Keys){
	WriteLine("	public static string " + embededResource 
	                 + " => ReadResource(Assembly.GetExecutingAssembly().GetName().Name + \"."
					 + projectItems[embededResource]
					 + "\");"
					 );
}
#>

	private static string ReadResource(string resourceName){
		using (Stream stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(resourceName))
		  using (StreamReader reader = new StreamReader(stream))
		  {
			  string result = reader.ReadToEnd();
			  return result;
		  }
	}
}
<#+
	public Dictionary<string,string> GetProjectItemsRecursively(EnvDTE.ProjectItems items)
	{
		var embededItems = new Dictionary<string,string>();
		if (items == null) return embededItems;
		var root = Host.ResolvePath("");

		foreach(EnvDTE.ProjectItem item in items)
		{
			string fName = item.FileNames[1];//.Replace("\\", "/");
			if(!fName.EndsWith("\\") && item.Properties.Item("BuildAction").Value.ToString() == "3"){
				var fullName = fName.Substring(root.Length + 1).Replace("\\", ".");
				var fullNameSplit = fullName.Split('.');
				embededItems.Add(fullNameSplit[fullNameSplit.Length-2], fullName);
			}

			var childItems = GetProjectItemsRecursively(item.ProjectItems);
			foreach (var childItem in childItems)
			{
				if(!embededItems.ContainsKey(childItem.Key)){
					embededItems.Add(childItem.Key, childItem.Value);
				}
			}
		}
		return embededItems;
	}
#>